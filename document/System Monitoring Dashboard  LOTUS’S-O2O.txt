Product Requirements Document (PRD) 
Project Name 
	System Monitoring Dashboard 
LOTUS’S-O2O
	Requirement Topic 
	Monitoring of Order Data Transmission  from Phoenix OMS to Downstream Systems
	Requirement Owner 
	Kittisak Meeprasert /  
Adcharee Yaowasamlee
	Submit Date 
	12 June 2025
	Version Control 
	1.0.2
	



1. Project Background:  
Phoenix system manages order processing and needs to send order-related data  from its Order Management System (OMS) to various downstream services for fulfillment,  invoicing, stock update, and delivery management. To ensure data consistency and  operational reliability, a Monitoring system is required to track and report the order flow  status in real-time. 
2. Objective this development is to: 
Develop a Monitoring solution to track the Order Flow from Phoenix OMS to  downstream systems, ensuring transparency, early error detection, and timely alerts for  failures or delays. 
Initial scope (POC): Focus on monitoring the data flow from Phoenix OMS to  Phoenix Commerce Engine.
3. Scope  
• Monitor real-time status of order data sent from Phoenix OMS. 
• Track success, failure, and delay status of each order message. 
• Provide dashboard/report for visualization. 
• Alert system for failures or delays beyond threshold. 
• Initial POC covers: Phoenix OMS → Phoenix Commerce Engine. 
• Future phases will include: 
• Phoenix OMS → Checkout services / Invoice service / Stock services 
• Phoenix OMS → Instore app / Rider App / Hijump app / Loginext 
4. Functional Requirements
ID 
	Requirement 
	Description 
	Priority 
	Notes
	FR-01 
	Track Order Messages 
	The system must be able to  
monitor the status of each order  data transmission from Phoenix  OMS.
	High 
	Track by order ID  and timestamp
	FR-02 
	Status Classification 
	The system must classify status  into: Success, Failed, and Delayed.
	High 
	Delay threshold to be  defined (e.g., > 30  seconds)
	FR-03 
	Dashboard 
	Provide a real-time dashboard to  visualize overall status and  
individual order tracking.
	High 
	Filters by date,  
status, channel
	FR-04 
	Alert Notification 
	Send alerts via email or integrated  alerting tools in case of failures or  delays beyond threshold.
	Medium 
	Configurable alert  rules
	FR-05 
	POC Scope Limitation 
	The POC will focus only on  monitoring data transmission from  Phoenix OMS to Phoenix  
Commerce Engine.
	High 
	Broader scope in  
future phases
	



5. Non-Functional Requirements 
• The system must operate in real-time or near real-time with minimal latency. • It must support a high volume of order transactions, especially during peak  hours. 
• The system should have high availability (24/7 uptime) with robust failover  handling. 
• Security standards must be maintained for data privacy and integrity. • Historical logs must be retained and backed up regularly for audit and  troubleshooting. 
6. User Roles 
• Operations Team 
o Monitor live order flow 
o Investigate failures or anomalies 
o Acknowledge and respond to alerts 
• Development Team 
o Diagnose technical issues 
o Perform root cause analysis 
o Fine-tune monitoring mechanisms 
• Management / Business Stakeholders 
o View aggregated data and KPIs 
o Support decision-making through trend reports 
o Receive summaries or incident reports 
7. Dependencies 
• Data access from Phoenix OMS and Phoenix Commerce Engine • Availability of APIs or message queues for order data 
• Access to alerting and dashboard tools or platforms
8. Appendix 
• Order Flow
  

• Airflow Architecture & DAG Design 
Let’s say this is your current Airflow architecture. 
  

o How will you use Airflow for real-time order monitoring? (Airflow is  
typically batch-oriented) 
o What is your DAG design approach for monitoring the Phoenix OMS to the  
Phoenix Commerce Engine? 
o How frequently will your monitoring workflows run? (Every minute? 30 
seconds?) 
o Will you use Airflow sensors to detect new orders or poll at intervals? 
o How will you handle the gap between Airflow's batch nature and real 
time monitoring requirements?
• Mimir/Grafana Architecture 
  

o How will you configure the Mimir cluster for high availability? 
o What's your strategy for the object storage costs as data grows? 
o Can you explain how query performance will be maintained as metric  
volume increases?
• Order Monitoring Flow 
  

o Can you demonstrate this exact flow with our Phoenix systems? 
o What's the actual end-to-end latency in this sequence? 
o How will you handle the correlation step if order IDs don't match perfectly?
• DAG Workflow Design 
  

o Can you show us your actual DAG code structure for this workflow? 
o How will you optimize the parallel execution of these tasks? 
o What happens if the correlation step finds inconsistencies?
• Dashboard User Roles Diagram 
o Can you demo each of these dashboard views? 
o How will you implement role-based access control? 
o What specific widgets will you include in each dashboard? 
• POC to Production Scaling Diagram 
o What changes are needed to go from Phase 1 to Phase 2? o How will costs scale as we add more systems to monitor? o What risks do you see in the scaling process? 
• Real-time Challenges Diagram 
o How will you address each of these Airflow limitations? 
o Under what conditions would you recommend moving to streaming  alternatives? 
o Can you quantify the trade-offs for our specific use case?